#!/usr/bin/env python3

import argparse
import datetime
from pymisp import PyMISP
import urllib3
import sys
import logging
import os
from dotenv import load_dotenv  # Import load_dotenv to process .env files

# Disable insecure request warnings if using self-signed certificates
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def parse_arguments():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(
        description='Disable IDS flag on attributes triggered by warninglists in recent events.')
    # Remove URL and API key arguments, as they will be loaded from .env file
    parser.add_argument('-c', '--cert', help='Path to client certificate')
    parser.add_argument('--no-ssl-verify', action='store_true',
                        help='Disable SSL certificate verification')
    parser.add_argument('--debug', action='store_true', help='Enable debug output')
    parser.add_argument('--days', type=int, default=1,
                        help='Number of days back to fetch events (default: 1)')
    return parser.parse_args()

def initialize_logger(debug=False):
    """Initialize the logging configuration."""
    level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(level=level,
                        format='%(asctime)s - %(levelname)s - %(message)s')

def connect_to_misp(url, key, ssl_verify=True, cert=None, debug=False):
    """Connect to the MISP instance."""
    try:
        misp = PyMISP(url, key, ssl=ssl_verify, cert=cert, debug=debug)
        return misp
    except Exception as e:
        logging.error(f"Error connecting to MISP: {e}")
        sys.exit(1)

def fetch_events(misp, date_from):
    """Fetch events created since a specific date."""
    try:
        logging.debug(f"Fetching events since {date_from.strftime('%Y-%m-%d')}")
        events = misp.search(controller='events', date_from=date_from.strftime('%Y-%m-%d'),
                             metadata=False, pythonify=True)
        logging.debug(f"Fetched {len(events)} events")
        return events
    except Exception as e:
        logging.error(f"Error fetching events: {e}")
        sys.exit(1)

def process_events(misp, events):
    """Process events to disable IDS flag on attributes triggered by warninglists."""
    total_attributes_modified = 0
    for event in events:
        event_id = event.id
        event_info = event.info
        logging.info(f"Processing Event ID {event_id}: {event_info}")
        attributes_modified = process_event_attributes(misp, event)
        total_attributes_modified += attributes_modified
    return total_attributes_modified

def process_event_attributes(misp, event):
    """Process both top-level attributes and object attributes within an event."""
    attributes_modified = 0
    # Process top-level attributes
    for attribute in event.attributes:
        if process_attribute(misp, attribute, event.id):
            attributes_modified += 1
    # Process attributes within objects
    for misp_object in event.objects:
        for attribute in misp_object.attributes:
            if process_attribute(misp, attribute, event.id, misp_object.id):
                attributes_modified += 1
    return attributes_modified

def process_attribute(misp, attribute, event_id, object_id=None):
    """Process a single attribute, disabling IDS flag if it matches warninglists."""
    try:
        # Check if the attribute value is in any warninglist
        warninglist_hits = misp.values_in_warninglist(attribute.value)
        if warninglist_hits:
            # Disable IDS flag if it's enabled
            if attribute.to_ids:
                attribute.to_ids = False
                # Update the attribute in MISP
                misp.update_attribute(attribute)
                if object_id:
                    logging.debug(f"Attribute ID {attribute.id} in Object ID {object_id} of Event ID {event_id} modified (IDS flag disabled)")
                else:
                    logging.debug(f"Attribute ID {attribute.id} in Event ID {event_id} modified (IDS flag disabled)")
                return True
    except Exception as e:
        if object_id:
            logging.error(f"Error processing attribute ID {attribute.id} in Object ID {object_id} of Event ID {event_id}: {e}")
        else:
            logging.error(f"Error processing attribute ID {attribute.id} in Event ID {event_id}: {e}")
    return False

def main():
    # Load environment variables from .env file
    load_dotenv()

    args = parse_arguments()
    initialize_logger(args.debug)

    # Get URL and API key from environment variables
    url = os.environ.get('MISP_URL')
    key = os.environ.get('MISP_KEY')

    if not url:
        logging.error("MISP URL is not provided. Set it in the .env file as MISP_URL.")
        sys.exit(1)

    if not key:
        logging.error("MISP API key is not provided. Set it in the .env file as MISP_KEY.")
        sys.exit(1)

    misp = connect_to_misp(url, key, ssl_verify=not args.no_ssl_verify,
                           cert=args.cert, debug=args.debug)

    # Calculate the date from which to fetch events
    date_from = datetime.datetime.now() - datetime.timedelta(days=args.days)

    events = fetch_events(misp, date_from)
    total_events_checked = len(events)
    logging.info(f"Total events fetched: {total_events_checked}")

    total_attributes_modified = process_events(misp, events)

    # Present the final report
    print(f"Total events checked: {total_events_checked}")
    print(f"Total attributes modified (IDS flag disabled): {total_attributes_modified}")

if __name__ == '__main__':
    main()
